[{"title":"ElementUI后台管理系统中各种注意事项","date":"2018-06-28T12:11:11.000Z","path":"2018/06/28/ElementUI后台管理系统中各种注意事项/","text":"1.使用 svg 组件进行图标引用以前图片一般用 img 来实现,后来因为请求资源太多进行优化，使用雪碧图，但雪碧图修改起来不方便，就使用 font 库，font 的资源图标有限，找图难受使用阿里开源库 iconfont,各种小图标，自定义图标, 使用 symbol 姿势 1.1 创建 icon-component 组件123456789101112131415161718192021222324252627282930313233343536373839404142&lt;template&gt; &lt;svg :class=\"svgClass\" aria-hidden=\"true\"&gt; &lt;use :xlink:href=\"iconName\"&gt;&lt;/use&gt; &lt;/svg&gt;&lt;/template&gt;&lt;script&gt;export default &#123; name: 'svg-icon', props: &#123; iconClass: &#123; type: String, required: true &#125;, className: &#123; type: String &#125; &#125;, computed: &#123; iconName() &#123; return `#icon-$&#123;this.iconClass&#125;` &#125;, svgClass() &#123; if (this.className) &#123; return 'svg-icon ' + this.className &#125; else &#123; return 'svg-icon' &#125; &#125; &#125;&#125;&lt;/script&gt;&lt;style scoped&gt;.svg-icon &#123; width: 1em; height: 1em; vertical-align: -0.15em; fill: currentColor; overflow: hidden;&#125;&lt;/style&gt; 1.2 使用 svg-sprite-loader 将 svg 打包成 svg-sprite默认的 vue-cli 对 svg 有处理，为了防止冲突，采用 webpack 的 exclude,include 来处理，代码如下： 1234567891011121314151617&#123; test: /\\.svg$/, loader: 'svg-sprite-loader', include:[resolve('src/icons')], options: &#123; symbolId: 'icon-[name]' &#125;&#125;,&#123; test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/, loader: 'url-loader', exclude:[resolve('src/icons')], options: &#123; limit: 10000, name: utils.assetsPath('img/[name].[hash:7].[ext]') &#125;&#125;, 1.3 建立@/src/icons/index.js 自动导入图标新建 icons 文件夹下面 svg 文件夹拿来放 svg 格式的图片 index.js 代码如下 123456789import Vue from 'vue'import SvgIcon from '@/components/SvgIcon'// 全局注册icon-svgVue.component('svg-icon', SvgIcon)const requireAll = requireContext =&gt; requireContext.keys().map(requireContext)const req = require.context('./svg', false, /\\.svg$/)requireAll(req) 1.4 在main.js中引入icons1import './icons' // icon ###1.5 在组件中直接使用组件调用 1&lt;svg-icon icon-class=\"password\"&gt;&lt;/svg-icon&gt;","tags":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"},{"name":"Element-ui","slug":"Element-ui","permalink":"http://yoursite.com/tags/Element-ui/"}]},{"title":"前端各种面试题","date":"2018-06-28T07:13:20.000Z","path":"2018/06/28/前端各种面试题/","text":"1.就是webpack和gulp有啥区别，是如何实现的？2.webpack和vue底层实现原理3.还有说说require.js","tags":[]},{"title":"Vscode格式化代码","date":"2018-06-27T07:23:20.000Z","path":"2018/06/27/Vscode格式化代码/","text":"1.Alt+Shift+F格式化代码不成功问题1. vue文件里面的template格式化不成功 安装了vetur插件 =》 文件-&gt;首选项-&gt;设置-&gt;&quot;vetur.format.defaultFormatter.html&quot;: &quot;js-beautify-html&quot; //格式化vue Template代码 问题2. vue文件里面的js格式化不成功 “prettier.eslintIntegration”: false #之前设置成了true","tags":[{"name":"Vscode","slug":"Vscode","permalink":"http://yoursite.com/tags/Vscode/"},{"name":"Elint","slug":"Elint","permalink":"http://yoursite.com/tags/Elint/"},{"name":"Prettier","slug":"Prettier","permalink":"http://yoursite.com/tags/Prettier/"}]},{"title":"hexo+github搭建属于自己的个人博客","date":"2018-06-22T07:25:56.000Z","path":"2018/06/22/hexo-github搭建属于自己的个人博客/","text":"1. 前言其实平时很少写文章，总觉得自己的水平还不够，又害怕误导别人。但是遇到问题又总想记录下来，毕竟自己工作了一段时间了。还是想自己搭建属于自己的博客，也算是一个温馨的小屋，以后就可以发一些自己总结的文章or遇到的坑or学习笔记。 2. 安装环境 安装node.js 安装Git 有自己的github账号 vscode编辑器 作为一个程序员，这最基本的配置安装肯定是具备的（不会的可以网上搜，有很多教程） 3. 全局安装hexo,搭建基本的博客 使用npm全局安装hexo 1$ npm install -g hexo-cli hexo-cli初始化 使用vscode打开一个文件夹位置,用来存放Blog文件夹，点开vscode的终端输入一下命令123$ npm init &lt;folder&gt; $ cd &lt;folder&gt;$ npm install folder是你的文件夹名称 如 npm init MyBlog 查看默认的博客页面 继续在终端输入 12$ npm g$ npm s 默认会 http://localhost:4000/ 点击就可以查看 4. hexo-cli基本文件夹目录介绍12345678.├── _config.yml # 个人网站的基本信息├── package.json # 依赖的npm包管理├── scaffolds # 模板文件夹├── source # 资源文件夹| ├── _drafts| └── _posts # 默认新生成的页面在此文件夹下└── themes # 主题文件夹,默认下面是landscape主题 5. 自定义博客5.1修改基本的配置信息在_config.yml 根据个人的信息进行填写，详细的配置可以参考Hexo基本配置 主要是填写site下的基本信息,以及要部署的github的repository site配置 1234567# Sitetitle: 博客名称subtitle: 博客二级标题description: 博客的描述,有助于引擎搜索author: 博客作者language: 语言timezone: 时区 github部署配置 12345deploy: type: git repository: github仓库地址 (如:git@github.com:liyanyan1994/liyanyan1994.github.io.git) message: branch: master 5.2下载喜欢的主题hexo提供了很多的主题,详细的可以参考hexo主题进行筛选 这里根据个人喜好进行选择(个人选择的是BlueLake),终端命令输入: 1.1安装主题1$ git clone https://github.com/chaooo/hexo-theme-BlueLake.git themes/BlueLake 1.2安装主题渲染器BlueLake是基于jade和stylus写的，所以需要安装hexo-renderer-jade和hexo-renderer-stylus来渲染。12$ npm install hexo-renderer-jade@0.3.0 --save$ npm install hexo-renderer-stylus --save 1.3 启用主题打开根_config.yml配置文件，找到theme字段，将其值改为BlueLake(先确认主题文件夹名称是否为BlueLake)。根_config.ymllink1theme: BlueLake 1.4 本地启动服务器git bash1$ hexo s 5.3自定义样式在thems/BlueLake 修改layout和source的css进行样式修改,就可以得到自己的页面最终的样子： 6.常见的hexo命令终端输入: hexo generate(简写 hexo g) —根据模板生成静态页面 hexo server(简写hexo s) —本地启动服务器,查看静态页面的效果 hexo clean —清除缓存文件 (db.json) 和已生成的静态文件 (public) hexo init [layout] — 新建一篇文章，默认会在source/_posts生成一个名字是title的md文件，layout不填写会使用默认的布局 hexo g -d —生成文件并且部署到github上","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"BlueLake主题","slug":"BlueLake主题","permalink":"http://yoursite.com/tags/BlueLake主题/"}]},{"title":"vue-cli中按需加载elementUI库","date":"2018-06-20T12:13:20.000Z","path":"2018/06/20/vue-cli中按需加载elementUI库/","text":"前言常常用 vue 开发一些管理系统，那么常用的 elementUI 库是大部分人的选择，不管三七二十一 npm install 一波,在 main.js 中直接一起引入，打包的时候才发现包太大，有些组件根本没有用到，于是我采取了按需引入的方法。 1. 安装 element-ui1npm i element-ui -S 2. 按需引入1.1 安装 babel-plugin-component1npm install babel-plugin-component -D 1.2 修改.babelrc在 plugins 中添加数组 1234567&quot;plugins&quot;:[ &quot;component&quot;, &#123; &quot;libraryName&quot;: &quot;element-ui&quot;, &quot;styleLibraryName&quot;: &quot;theme-chalk&quot; &#125; ] 1.3 在 main.js 中引入所需要的组件，进行注册12345678import &#123; Button, Select &#125; from 'element-ui'const elementComponent = [Button, Select]// 注册elementUI的每个按需引入的组件elementComponent.forEach(item =&gt; &#123; Vue.component(item.name, item)&#125;) 1.4 关于 Message 等自动弹出问题之前一直是按照全局加载的，修改成按需加载之后会出现 Comfirm 自动弹出,在 github 上可以看到问题按需引入 Message 等自动弹出问题 解决的方法是 1.把组件放在原型上 12345678910const MsgBox = MessageBoxVue.prototype.$confirm = MsgBox.confirmVue.prototype.$message = Message# 和以前的操作一样this.$confirm('tips Title', 'Confirm', &#123; confirmButtonText: 'Yes', cancelButtonText: 'Cancel', type: 'warning'&#125;).then(() =&gt; &#123;&#125;) 2.在单页面使用的时候直接引入组件 12345import &#123;MessageBox&#125; from 'element-ui'MessageBox(&#123; # options&#125;) 1.5 国际化国际化其实很简单，直接引入 12345import lang from 'element-ui/lib/locale/lang/en'import locale from 'element-ui/lib/locale'// 设置语言locale.use(lang) 默认给所有的组件设置一个默认的尺寸 1Vue.prototype.$ELEMENT = &#123; size: 'small' &#125; 那么同时设置尺寸和语言怎么设置 1Vue.use(ElementUI, &#123; size: 'small', locale: en &#125;) 3. 使用命令行自定义主题色1.1 全局安装主题生成工具bash1npm i element-theme -g 1.2 初始化变量文件命令行输入 1et -i 会默认的输出一个 element-variables.scss 文件在最外层目录 1.3 修改 scss 的变量打开文件 element-variables.scss,根据需要修改变量如: 12345$--color-primary: #016d9c !default;$--color-success: #36b3b3 !default;$--color-warning: #e6a23c !default;$--color-danger: #f56c6c !default;$--color-info: #50bfff !default; 1.4 编译主题命令行输入 et 就可以产生 theme 文件 因为是按需引入的，故修改.babelrc 的 styleLibraryName 如下： 12345678&#123; \"plugins\": [[\"component\", [ &#123; \"libraryName\": \"element-ui\", \"styleLibraryName\": \"~theme\" &#125; ]]]&#125;","tags":[{"name":"Vue","slug":"Vue","permalink":"http://yoursite.com/tags/Vue/"},{"name":"Element-ui","slug":"Element-ui","permalink":"http://yoursite.com/tags/Element-ui/"}]},{"title":"MarkDown语法学习","date":"2018-06-20T08:41:20.000Z","path":"2018/06/20/MarkDown语法学习/","text":"标题一级到六级标题 中间需要一个空格键 一级标题二级标题三级标题四级标题五级标题六级标题引用 这是一个引用 使用&gt;表示就ok 图片与链接插入图片和链接的语法很像，区别在于一个！ 插入链接显示链接的名称demo: liyanyan.github 插入图片！图片名称插入图片的地址需要床图，暂时推荐SM.MS(SM.SM)的服务，生成url就可以demo: 粗体和斜体**一个星号是斜体 这里是斜体 **两个星号是粗体 这里是粗体 表格 表格头 表格头 表格头 Doudou 6月20日 学习MD语法 Liyanyan 6月20日 开始写md 代码框使用tab缩进包含就可以this is a line code 分割线***分割线(连续三个星号)—分割线 列表（*加上空格） 这是第一列 这是第二列 1.这是有序列表第一个 2.这是有序列表第二个","tags":[{"name":"MarkDown","slug":"MarkDown","permalink":"http://yoursite.com/tags/MarkDown/"}]}]